(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{552:function(t,e,a){"use strict";a.r(e);var s=a(1),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ecmascript-specification-系列-词汇语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-specification-系列-词汇语法"}},[t._v("#")]),t._v(" ECMAScript Specification 系列 - 词汇语法")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("JS 词汇语法在ECMAScript 规范中的定义: ECMAScript的模块或者脚本的源文本首先会被转换成一系列的"),a("code",[t._v("输入元素")]),t._v("，比如"),a("code",[t._v("tokens")]),t._v("、"),a("code",[t._v("line terminators")]),t._v("、"),a("code",[t._v("white space")]),t._v("和 "),a("code",[t._v("comment")]),t._v("，从左到右扫描源文本，反复的将最长的代码点序列作为下一个输入元素。")])]),t._v(" "),a("p",[t._v("根据JavaScript知识体系脑图中的"),a("code",[t._v("Lexical Grammar")]),t._v("分支")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Wangbaoqi/blogImgs/master/nateImgs/JavaScript/grammar/grammar_1.png",alt:"lexical grammar"}})]),t._v(" "),a("p",[t._v("根据上图，输入元素基本有一下几种：")]),t._v(" "),a("ul",[a("li",[t._v("whiteSpace")]),t._v(" "),a("li",[t._v("lineTerminator")]),t._v(" "),a("li",[t._v("comment")]),t._v(" "),a("li",[t._v("token")])]),t._v(" "),a("p",[t._v("首先看下 ECMAScript中的源字符 SourceCharacter。")]),t._v(" "),a("h2",{attrs:{id:"sourcecharacter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sourcecharacter"}},[t._v("#")]),t._v(" SourceCharacter")]),t._v(" "),a("p",[a("strong",[t._v("SourceCharacter")]),t._v("在规范中的定义是 "),a("strong",[t._v("any Unicode code point")]),t._v("（任何Unicode码点）。这里重新科普一下计算机中的字符编码（Character Encoding）。")]),t._v(" "),a("blockquote",[a("p",[t._v("ECMAScript code is expressed using Unicode. ECMAScript source text is a sequence of code points. All Unicode code point values from U+0000 to U+10FFFF\n在ECMAScript代码是使用Unicode来表示的，ECMAScript源文本是一系列的码点，所有的码点的值的范围是\nU+0000 - U+10FFFF （16进制表示）")])]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://zh.wikipedia.org/zh/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("Character Encoding"),a("OutboundLink")],1)]),t._v(": 字集碼是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位元组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，"),a("strong",[t._v("ASCII将字母、数字和其它符号编号，并用7位元的二进制來表示这个整数")]),t._v("。通常会额外使用一个扩充的位元，以便于以1个字节的方式存储。")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/ASCII",target:"_blank",rel:"noopener noreferrer"}},[t._v("ASCII"),a("OutboundLink")],1)]),t._v(": 是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本延伸美国标准信息交换码则可以部分支持其他西欧语言，并等同于国际标准ISO/IEC 646。\nASCII码的表达方式：使用指定的7位或者8位二进制组合来表示128或者256中可能的字符（字符一般是字母、数字、符号的统称）。")]),t._v(" "),a("p",[t._v("在计算机中，所有信息都是一个"),a("code",[t._v("二进制值")]),t._v(", "),a("code",[t._v("二进制位")]),t._v("组成了"),a("code",[t._v("二进制值")]),t._v(", 每个二进制位有两种状态，"),a("code",[t._v("0")]),t._v("和"),a("code",[t._v("1")]),t._v(", 而在ASCII码的表达方式中，由7位或者8位"),a("code",[t._v("二进制位")]),t._v("组合成字符，而字符的种类就有了2^7（128）或者2^8（256）种。而这个7位或者8位的二进制的组合被称之为"),a("code",[t._v("字节")]),t._v(", 因此一个字节有128种或者256种表示方式，比如：00000000 字节就表示空字符。而字符表示的范围是 00000000 - 11111111。")]),t._v(" "),a("p",[t._v("标准的ACSII码也是基础ACSII码（是由7位二进制组成，剩下的一位用0来补位），表示所有的的大写、小写字母、数字0-9、标点符号以及美式英语中的特殊字符。")]),t._v(" "),a("p",[a("strong",[t._v("0-31")]),t._v("以及127（33个）是控制字符或通信专用字符（其余为可显示字符），如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BS（退格)、BEL（响铃）等；通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等；ASCII值为8、9、10 和13 分别转换为退格、制表、换行和回车字符。它们并没有特定的图形显示，但会依不同的应用程序，而对文本显示有不同的影响")]),t._v(" "),a("p",[a("strong",[t._v("32-126")]),t._v("(95个) 是字符，32是空格，"),a("strong",[t._v("48-57")]),t._v("是十个阿拉伯数字，"),a("strong",[t._v("65-90")]),t._v("为26个大写英文字母，"),a("strong",[t._v("97-122")]),t._v("是26个小写英文字母。")]),t._v(" "),a("p",[a("strong",[t._v("Basic ACSII Table")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Wangbaoqi/blogImgs/master/nateImgs/JavaScript/grammar/grammar_2.gif",alt:"basic ascii"}})]),t._v(" "),a("p",[a("strong",[t._v("Extended ACSII Table")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Wangbaoqi/blogImgs/master/nateImgs/JavaScript/grammar/grammar_3.gif",alt:"extended table"}})]),t._v(" "),a("p",[t._v("ASCII的局限就是只能显示基本的26个英文字符、阿拉伯数字以及英式标点符号，为了解决这个问题，现在基本都使用Unicode编码。")]),t._v(" "),a("p",[a("strong",[t._v("中文的编码方式")]),t._v("：是GB2312，使用两个字节代表一个汉字，那么最多就有 256*256 种字符。")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Unicode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unicode"),a("OutboundLink")],1)]),t._v(": 是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。\n"),a("code",[t._v("Unicode")]),t._v("的实现方式称为 Unicode转换格式（Unicode Transformation Format，简称为 UTF），实现方式总共有UTF-8，UTF-16，UTF-32。")]),t._v(" "),a("p",[a("strong",[t._v("常用的UTF-8")]),t._v("\nUTF-8 最大的特点，它是一种变长的编码方式，可以使用1-4个字节来表示字符，根据不同的字符来减少字节长度。\nUTF-8 的编码规则：")]),t._v(" "),a("ul",[a("li",[t._v("单字节的字符，首位设置为0，后面7位表示这个字符的Unicode吗。因此，对于英文字母，ACSII吗的表示和UTF-8的编码是相同的")]),t._v(" "),a("li",[t._v("多字节的字符"),a("code",[t._v("n")]),t._v("，第一个字节的前"),a("code",[t._v("n")]),t._v("位都是"),a("code",[t._v("1")]),t._v("，第"),a("code",[t._v("n+1")]),t._v("位都是0，后面字节前两位为"),a("code",[t._v("10")]),t._v("，剩下的都是Unicode码")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Unicode符号范围  16进制")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("UTF-8编码方式  2进制")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0000 0000-0000 007F")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0xxxxxxx")])]),t._v(" "),a("tr",[a("td",[t._v("0000 0080-0000 07FF")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("110xxxxx 10xxxxxx")])]),t._v(" "),a("tr",[a("td",[t._v("0000 0800-0000 FFFF")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1110xxxx 10xxxxxx 10xxxxxx")])]),t._v(" "),a("tr",[a("td",[t._v("0001 0080-0010 FFFF")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("11110xxx 10xxxxxx 10xxxxxx 10xxxxxx")])])])]),t._v(" "),a("p",[a("strong",[t._v("Encoding a character to UTF-8 proceeds as follows")]),t._v(":")]),t._v(" "),a("ol",[a("li",[t._v("获取字符的Unicode code point，在上表第一列进行对比，寻找对应行数")]),t._v(" "),a("li",[t._v("找到对应的第一列中Unicode符号范围，然后找到对应的UTF-8的二进制编码方式")]),t._v(" "),a("li",[t._v("然后对"),a("code",[t._v("x")]),t._v("对应的位置进行补位")])]),t._v(" "),a("p",[t._v("接下里有个🌰，"),a("strong",[t._v("将一个字符编码成UTF-8编码格式")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 char byte: Unicode code point 0 - 127")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 char byte: Unicode code point 128 - 2047")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3 char byte: Unicode code point 2048 - 0xFFFF")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4 char byte: Unicode code point 65536 - 0x1FFFFF")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5 char byte: Unicode code point 0x200000 - 0x3FFFFFF")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6 char byte: Unicode code point 0x4000000 - 0x7FFFFFFF")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEXRANGELIST")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n    to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x7F'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 127")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x80'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 128")]),t._v("\n    to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x7FF'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2047")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x800'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2048")]),t._v("\n    to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xFFFF'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 65535")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x1000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 65536")]),t._v("\n    to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x10FFFF'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1114111")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BINARYRANGELIST")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0xxxxxxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'110xxxxx10xxxxxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1110xxxx10xxxxxx10xxxxxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11110xxx10xxxxxx10xxxxxx10xxxxxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * GetRangeUnicode \n * @param {*} char \n * @returns index\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetRangeUnicode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEXRANGELIST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("from "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * UTF-8 Encoding\n * @param char any one char\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UTF8Encoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the char hex code point of the unicode")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" charHex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the char binary code point of the unicode, and convert array. e.g '100111000100101'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" charBinary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("codePointAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the range of the char that converted hex code point, and concert array. e.g '1110xxxx10xxxxxx10xxxxxx'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rangeBinary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BINARYRANGELIST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetRangeUnicode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("charHex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" charBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rangeBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fraom")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rangeBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      rangeBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" charBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      cLen"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    rLen"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    binary_utf_8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rangeBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    hex_utf_8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rangeBinary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UTF8Encoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'严'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {binary_utf_8: "111001001011100010100101", hex_utf_8: "e4b8a5"}')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br"),a("span",{staticClass:"line-number"},[t._v("58")]),a("br"),a("span",{staticClass:"line-number"},[t._v("59")]),a("br"),a("span",{staticClass:"line-number"},[t._v("60")]),a("br"),a("span",{staticClass:"line-number"},[t._v("61")]),a("br"),a("span",{staticClass:"line-number"},[t._v("62")]),a("br"),a("span",{staticClass:"line-number"},[t._v("63")]),a("br"),a("span",{staticClass:"line-number"},[t._v("64")]),a("br"),a("span",{staticClass:"line-number"},[t._v("65")]),a("br"),a("span",{staticClass:"line-number"},[t._v("66")]),a("br"),a("span",{staticClass:"line-number"},[t._v("67")]),a("br"),a("span",{staticClass:"line-number"},[t._v("68")]),a("br"),a("span",{staticClass:"line-number"},[t._v("69")]),a("br"),a("span",{staticClass:"line-number"},[t._v("70")]),a("br"),a("span",{staticClass:"line-number"},[t._v("71")]),a("br"),a("span",{staticClass:"line-number"},[t._v("72")]),a("br"),a("span",{staticClass:"line-number"},[t._v("73")]),a("br"),a("span",{staticClass:"line-number"},[t._v("74")]),a("br"),a("span",{staticClass:"line-number"},[t._v("75")]),a("br")])]),a("p",[a("strong",[t._v("UTF16Encoding - 数字代码点值cp的UTF16Encoding如下确定：")])]),t._v(" "),a("ol",[a("li",[t._v("Assert: 0 ≤ codePoint ≤ 0x10FFFF.")]),t._v(" "),a("li",[t._v("If codePoint ≤ 0xFFFF, return codePoint.")]),t._v(" "),a("li",[t._v("Let cu1 be floor((codePoint - 0x10000) / 0x400) + 0xD800.")]),t._v(" "),a("li",[t._v("Let cu2 be ((codePoint - 0x10000) modulo 0x400) + 0xDC00.")]),t._v(" "),a("li",[t._v("Return the code unit sequence consisting of cu1 followed by cu2.")])]),t._v(" "),a("p",[a("strong",[t._v("UTF16Decode - 通过执行以下操作将形成UTF-16代理对的两个代码单元（前导和尾随）转换为代码点：")])]),t._v(" "),a("ol",[a("li",[t._v("Assert: lead is a leading surrogate and trail is a trailing surrogate.")]),t._v(" "),a("li",[t._v("Let cp be (lead - 0xD800) × 0x400 + (trail - 0xDC00) + 0x10000.")]),t._v(" "),a("li",[t._v("Return the code point cp.")])]),t._v(" "),a("h2",{attrs:{id:"whitespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#whitespace"}},[t._v("#")]),t._v(" WhiteSpace")]),t._v(" "),a("p",[t._v("根据规范定义，whitespace是被用来提升代码的可读性的，并且跟标识符是分隔开的。\n空格代码点可能出现在任意两个标记之间以及输入的开始或结尾。 空格代码点可能出现在StringLiteral，egularExpressionLiteral，Template或TemplateSubstitutionTail中，在这些地方它们被视为构成文字值一部分的重要代码点。 它们也可能出现在注释中，但不能出现在任何其他种类的标记中。")]),t._v(" "),a("p",[t._v("在ECMAScript中"),a("code",[t._v("whitespace")]),t._v("种类一般有：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code Point")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Unicode Name")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Abbreviation(缩写)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("U+0009")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CHARACTER TABULATION 水平制表符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("TAB or \\t")])]),t._v(" "),a("tr",[a("td",[t._v("U+000B")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LINE TABULATION 垂直制表符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("CR or \\v")])]),t._v(" "),a("tr",[a("td",[t._v("U+000C")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FORM FEED 分页符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("FF or \\f")])]),t._v(" "),a("tr",[a("td",[t._v("U+0020")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("SPACE  空格")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("SP")])]),t._v(" "),a("tr",[a("td",[t._v("U+00A0")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NO-BREAK SPACE")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("NBSP")])]),t._v(" "),a("tr",[a("td",[t._v("U+0009")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("ZERO WIDTH NO-BREAK SPACE")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ZWNBSP")])])])]),t._v(" "),a("p",[a("strong",[t._v("备注")]),t._v(": 获取字符串的码点一般会使用"),a("code",[t._v("String.codePointAt()")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<TAB>")]),t._v("Character Tabulation, 含义是水平制表符，转义字符"),a("code",[t._v("\\t")]),t._v(", 在控制台打印出来相当于是键盘中的"),a("code",[t._v("Tab")]),t._v("键，它在Unicode中的"),a("code",[t._v("Code Point")]),t._v("是"),a("code",[t._v("U+0009")]),t._v("或者是9(十进制)")]),t._v(" "),a("li",[t._v("跟水平制表符对应的还有"),a("code",[t._v("<VT>")]),t._v("Line Tabulation, 含义是垂直制表符，转义字符"),a("code",[t._v("\\v")]),t._v(", 在实际中几乎没有使用到过，它在Unicode中的"),a("code",[t._v("Code Point")]),t._v("是"),a("code",[t._v("U+000B")]),t._v("或者是11(十进制)")]),t._v(" "),a("li",[a("code",[t._v("<FF>")]),t._v("Form Feed, 含义是分页符，转义字符是"),a("code",[t._v("\\f")]),t._v(", 它在Unicode中的"),a("code",[t._v("Code Point")]),t._v("是"),a("code",[t._v("U+000C")]),t._v("或者是12(十进制)")]),t._v(" "),a("li",[a("code",[t._v("<SP>")]),t._v("Space, 含义是空格，原始字符是"),a("code",[t._v("\\u0020")]),t._v(", 它在Unicode中的"),a("code",[t._v("Code Point")]),t._v("是"),a("code",[t._v("U+0020")]),t._v("或者是20(十进制)")]),t._v(" "),a("li",[a("code",[t._v("<NBSP>")]),t._v("No-BreakSpace, 含义是无间隙空格，展示字符是"),a("code",[t._v("&nbsp;")]),t._v(",原始字符是"),a("code",[t._v("\\u00A0")]),t._v(", 它在Unicode中的"),a("code",[t._v("Code Point")]),t._v("是"),a("code",[t._v("U+00A0")]),t._v("或者是160(二进制)")]),t._v(" "),a("li",[a("code",[t._v("<ZWNBSP>")]),t._v("Zero Width No-Break Space, 含义是0宽无间隙空格，原始字符是"),a("code",[t._v("\\uFEFF")]),t._v(", 它在Unicode中的"),a("code",[t._v("Code Point")]),t._v("是"),a("code",[t._v("U+FEFF")]),t._v("或者是65279(十进制)")]),t._v(" "),a("li",[a("code",[t._v("<USP>")]),t._v(" "),a("a",{attrs:{href:"https://www.fileformat.info/info/unicode/category/Zs/list.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Any other Unicode “Space_Separator” code point"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"lineterminator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lineterminator"}},[t._v("#")]),t._v(" LineTerminator")]),t._v(" "),a("p",[t._v("像whitespace和lineTerminator的"),a("code",[t._v("码点")]),t._v("都是为了提升代码可读性而存在的。lineTerminator将有效的tokens分开。跟whitespace不同的是，行终止符对语法有一定的影响，\n一般来讲，行终止符可以出现在两个tokens中间，但是有一些地方是禁止的根据语法，行终止符也会影响"),a("code",[t._v(";")]),t._v("的自动插入，行终止符不能出现在"),a("code",[t._v("StringLiteral")]),t._v(","),a("code",[t._v("Template")]),t._v("等。")]),t._v(" "),a("p",[a("strong",[t._v("行终止符代码点列表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Code Point")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Unicode Name")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Abbreviation(缩写)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("U+000A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LINE FEED (LF) 换行符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("LF or \\n")])]),t._v(" "),a("tr",[a("td",[t._v("U+000D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CARRIAGE RETURN 回车符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("CR or \\r")])]),t._v(" "),a("tr",[a("td",[t._v("U+2028")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LINE SEPARATOR 分割符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("LS")])]),t._v(" "),a("tr",[a("td",[t._v("U+2029")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("PARAGRAPH SEPARATOR")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("PS")])])])]),t._v(" "),a("h2",{attrs:{id:"comment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comment"}},[t._v("#")]),t._v(" Comment")]),t._v(" "),a("p",[t._v("注释可以是单行或多行。 多行注释不能嵌套。\n因为单行注释可以包含LineTerminator代码点以外的任何Unicode代码点，并且由于通常的原则是令牌始终尽可能长，所以单行注释总是由 "),a("strong",[t._v("//")]),t._v(" 标记中的所有代码点组成到行尾。但是，行尾的LineTerminator不被视为单行注释的一部分； 它被词法语法单独识别，并成为句法语法的输入元素流的一部分。 这一点非常重要，因为这意味着单行注释的存在或不存在不会影响自动分号插入的过程。注释的行为类似于空白，并被丢弃，除了注释之外，如果MultiLineComment包含行终止符代码点，则出于语法语法分析的目的，整个注释将被视为LineTerminator。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单行注释")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 多行注释 */")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * 多行注释\n */")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tokens"}},[t._v("#")]),t._v(" Tokens")]),t._v(" "),a("p",[t._v("Tokens 可以表示JavaScript中一切有效的东西。根据"),a("code",[t._v("ECAMScript")]),t._v("的标准语法定义，包含以下几种类型")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BNF 产生式语法")]),t._v("\ntokens "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  IdentifierName\n  Punctuator\n  NumericLiteral \n  StringLiteral \n  Template\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"identifiername"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identifiername"}},[t._v("#")]),t._v(" IdentifierName")]),t._v(" "),a("blockquote",[a("p",[t._v("IdentifierName和ReservedWord是根据Unicode标准，标识符和模式语法中给出的默认标识符语法进行了一些小的修改的令牌。 ReservedWord是IdentifierName的枚举子集。 语法将标识符定义为不是保留字的IdentifierName。 Unicode标识符语法基于Unicode标准指定的字符属性。 所有符合标准的ECMAScript实现都必须将Unicode标准最新版本中指定类别中的Unicode代码点视为这些类别中的Unicode代码点。 ECMAScript实现可以识别在Unicode标准的更高版本中定义的标识符代码点。")])]),t._v(" "),a("p",[a("strong",[t._v("IndentifierName Syntax")]),t._v(" Syntax from "),a("strong",[t._v("ECMAScript")])]),t._v(" "),a("p",[t._v("IndentifierName的组成部分：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 伪代码")]),t._v("\nIndentifierName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IndentifierStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" IdentifierName\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符只能以$或者_或者Unicode序列开头")]),t._v("\nIndentifierStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $ or _ or \\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0233")]),t._v("  \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"reserved-words-保留字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reserved-words-保留字"}},[t._v("#")]),t._v(" Reserved Words 保留字")]),t._v(" "),a("p",[a("strong",[t._v("一个保留字是标识符名称不能当做标识符使用")])]),t._v(" "),a("p",[t._v("ReservedWords Syntax：")]),t._v(" "),a("p",[t._v("ReservedWord::\nkeyword\nFutureReservedWord\nNullLiteral\nBooleanLiteral")]),t._v(" "),a("h4",{attrs:{id:"keyword"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyword"}},[t._v("#")]),t._v(" keyword")]),t._v(" "),a("p",[t._v("下面的关键字不能被用作标识符")]),t._v(" "),a("p",[a("strong",[t._v("await")]),t._v(" "),a("strong",[t._v("break")]),t._v(" "),a("strong",[t._v("case")]),t._v(" catch class const continue debugger default delete do\nelse export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with "),a("strong",[t._v("yield")])]),t._v(" "),a("h4",{attrs:{id:"futurereversewords"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#futurereversewords"}},[t._v("#")]),t._v(" FutureReverseWords")]),t._v(" "),a("p",[t._v("目前标准中还保留了一个保留字，可能以后的标准会将其纳入进规范")]),t._v(" "),a("p",[a("strong",[t._v("enum")])]),t._v(" "),a("h4",{attrs:{id:"punctuators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#punctuators"}},[t._v("#")]),t._v(" Punctuators")]),t._v(" "),a("p",[t._v("目前 Punctuators 有以下几种:\n"),a("strong",[t._v("{")]),t._v(" "),a("strong",[t._v("(")]),t._v(" "),a("strong",[t._v(")")]),t._v(" "),a("strong",[t._v("[")]),t._v(" "),a("strong",[t._v("]")]),t._v(" "),a("strong",[t._v(".")]),t._v(" "),a("strong",[t._v("...")]),t._v(" "),a("strong",[t._v(";")]),t._v(" "),a("strong",[t._v(",")]),t._v(" "),a("strong",[t._v("<")]),t._v(" "),a("strong",[t._v(">")]),t._v(" "),a("strong",[t._v("<=")]),t._v(" "),a("strong",[t._v(">=")]),t._v(" "),a("strong",[t._v("==")]),t._v(" "),a("strong",[t._v("!=")]),t._v(" "),a("strong",[t._v("===")]),t._v(" "),a("strong",[t._v("!==")]),t._v(" "),a("strong",[t._v("+")]),t._v(" "),a("strong",[t._v("-")]),t._v(" * "),a("strong",[t._v("%")]),t._v(" "),a("strong",[t._v("++")]),t._v(" "),a("strong",[t._v("--")]),t._v(" "),a("strong",[t._v("<<")]),t._v(" "),a("strong",[t._v(">>")]),t._v(" "),a("strong",[t._v(">>>")]),t._v(" "),a("strong",[t._v("&")]),t._v(" "),a("strong",[t._v("|")]),t._v(" "),a("strong",[t._v("^")]),t._v(" "),a("strong",[t._v("!")]),t._v(" "),a("strong",[t._v("~")]),t._v(" "),a("strong",[t._v("&&")]),t._v(" "),a("strong",[t._v("||")]),t._v(" "),a("strong",[t._v("?:")]),t._v(" "),a("strong",[t._v("=+")]),t._v(" "),a("strong",[t._v("=-")]),t._v(" =* **= "),a("strong",[t._v("%=")]),t._v(" "),a("strong",[t._v("<<=")]),t._v(" "),a("strong",[t._v(">>=")]),t._v(" "),a("strong",[t._v(">>>=")]),t._v(" "),a("strong",[t._v("&=")]),t._v(" "),a("strong",[t._v("|=")]),t._v(" "),a("strong",[t._v("^=")]),t._v(" "),a("strong",[t._v("=>")]),t._v(" "),a("strong",[t._v("/")]),t._v(" "),a("strong",[t._v("/=")]),t._v(" "),a("strong",[t._v("}")])]),t._v(" "),a("h3",{attrs:{id:"literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literals"}},[t._v("#")]),t._v(" Literals")]),t._v(" "),a("p",[a("strong",[t._v("Literals")]),t._v(" 字面量，这个想必已经很熟悉了，有以下几种形式:")]),t._v(" "),a("h3",{attrs:{id:"null-literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-literal"}},[t._v("#")]),t._v(" Null Literal")]),t._v(" "),a("p",[t._v("Null字面量只有一种值: "),a("strong",[t._v("null")])]),t._v(" "),a("h3",{attrs:{id:"boolean-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-literals"}},[t._v("#")]),t._v(" Boolean Literals")]),t._v(" "),a("p",[t._v("Boolean 字面量有两种值: "),a("strong",[t._v("true")]),t._v(" 和 "),a("strong",[t._v("false")])]),t._v(" "),a("h3",{attrs:{id:"numeric-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numeric-literals"}},[t._v("#")]),t._v(" Numeric Literals")]),t._v(" "),a("blockquote",[a("p",[t._v("ECMAScript 规范中对Number值得定义: primitive value corresponding to a double-precision 64-bit binary format IEEE 754-2008 value。A Number value is a member of the Number type and is a direct representation of a number.")])]),t._v(" "),a("p",[t._v("Number字面量有一下四种形式: Syntax from "),a("strong",[a("a",{attrs:{href:"https://tc39.es/ecma262/#sec-literals-numeric-literals",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 262"),a("OutboundLink")],1)])]),t._v(" "),a("ul",[a("li",[t._v("DecimalLiteral - 整数小数")]),t._v(" "),a("li",[t._v("BinaryIntegerLiteral - 二进制整数字面量 表示方式 "),a("code",[t._v("0b0101")]),t._v("or"),a("code",[t._v("0B0101")])]),t._v(" "),a("li",[t._v("OctalIntegerLiteral - 八进制整数字面量 表示方式 "),a("code",[t._v("0o1771")]),t._v("or"),a("code",[t._v("0O1771")])]),t._v(" "),a("li",[t._v("HexIntegerLiteral - 十六进制整数字面量 表示方式 "),a("code",[t._v("0x200A")]),t._v("or"),a("code",[t._v("0X200A")])])]),t._v(" "),a("p",[t._v("在JavaScript中，Number被定义是符合"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/IEEE_754",target:"_blank",rel:"noopener noreferrer"}},[t._v("64位双精度浮点类型 IEEE-754"),a("OutboundLink")],1),t._v("的数字类型")]),t._v(" "),a("p",[a("strong",[t._v("为了熟知NumricLieral的类型，练习一个例子来巩固一下，写一个正则来匹配所有的Number字面量")])]),t._v(" "),a("p",[t._v("根据规范中定义NumberLiterall类型:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regInterg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\.\\d+|(0|[0-9])\\d*\\.?\\d*)([eE][-\\+]?\\d+)/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二进制")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regBinary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/0[bB]?[01]+/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 八进制")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regOctal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/0[oO]?[0-7]+/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 十六进制")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regHex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/0[xX]?[0-9a-fA-F]+/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number Literals")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number_reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\.\\d+|(0|[0-9])\\d*\\.?\\d*)([eE][-\\+]?\\d+)|(0[bB]?[01]+)|(0[oO]?[0-7]+)|(0[xX]?[0-9a-fA-F]+)/")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("h3",{attrs:{id:"stringliterals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringliterals"}},[t._v("#")]),t._v(" StringLiterals")]),t._v(" "),a("blockquote",[a("p",[t._v("字符串文字是用单引号或双引号引起来的零个或多个Unicode代码点。 Unicode代码点也可以由转义序列表示。 除了结束引号代码点U + 005C（REVERSE SOLIDUS），U + 000D（回车）和U + 000A（LINE FEED）外，所有代码点都可能以字符串文字形式出现。 任何代码点都可能以转义序列的形式出现。 字符串文字的计算结果为ECMAScript字符串值。 生成这些字符串值时，Unicode代码点按照UTF-16编码。 属于基本多语言平面的代码点被编码为字符串的单个代码单元元素。 所有其他代码点都被编码为字符串的两个代码单元元素。")])]),t._v(" "),a("p",[t._v("String字面量有一下两种形式: Syntax from "),a("a",{attrs:{href:"https://tc39.es/ecma262/#sec-literals-string-literals",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 262"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v('" DoubleStringCharacters "\n'),a("ul",[a("li",[t._v("DoubleStringCharacter DoubleStringCharacter")])])]),t._v(" "),a("li",[t._v("' SingleStringCharacters '\n"),a("ul",[a("li",[t._v("SingleStringCharacter SingleStringCharacters")])])])]),t._v(" "),a("p",[t._v("----------------------reference---------------------")]),t._v(" "),a("ul",[a("li",[t._v("DoubleStringCharacter ::\n"),a("ul",[a("li",[a("strong",[t._v("SourceCharacter")]),t._v(' but not one of " or \\ or LineTerminator( \\n \\r LS PS )')]),t._v(" "),a("li",[t._v("LS")]),t._v(" "),a("li",[t._v("PS")]),t._v(" "),a("li",[t._v("\\ "),a("strong",[t._v("EscapeSequence")])]),t._v(" "),a("li",[a("strong",[t._v("LineContinuation")])])])]),t._v(" "),a("li",[t._v("SingleStringCharacter ::\n"),a("ul",[a("li",[a("strong",[t._v("SourceCharacter")]),t._v(" but not one of ' or \\ or LineTerminator( \\n \\r LS PS )")]),t._v(" "),a("li",[t._v("LS")]),t._v(" "),a("li",[t._v("PS")]),t._v(" "),a("li",[t._v("\\ "),a("strong",[t._v("EscapeSequence")])]),t._v(" "),a("li",[a("strong",[t._v("LineContinuation")])])])]),t._v(" "),a("li",[t._v("LineContinuation ::\n"),a("ul",[a("li",[t._v("\\ LineTerminatorSequence (LF CR LS PS LF)")])])]),t._v(" "),a("li",[t._v("EscapeSequence ::\n"),a("ul",[a("li",[t._v("CharacterEscapeSequence")]),t._v(" "),a("li",[t._v("0 [lookahead ∉ DecimalDigit]")]),t._v(" "),a("li",[a("strong",[t._v("HexEscapeSequence")])]),t._v(" "),a("li",[t._v("UnicodeEscapeSequence")])])]),t._v(" "),a("li",[t._v("CharacterEscapeSequence ::\n"),a("ul",[a("li",[t._v("SingleEscapeCharater")]),t._v(" "),a("li",[t._v("NonEscapeCharater")])])]),t._v(" "),a("li",[t._v("SingleEscapeCharater :: one of\n"),a("ul",[a("li",[t._v("' \" \\ b f n r t v")])])]),t._v(" "),a("li",[t._v("NonEscapeCharater ::\n"),a("ul",[a("li",[t._v("SourceCharacter but not one of "),a("strong",[t._v("EscapeCharacter")]),t._v(" or LineTerminator")])])]),t._v(" "),a("li",[t._v("EscapeCharacter ::\n"),a("ul",[a("li",[t._v("SingleEscapeCharacter")]),t._v(" "),a("li",[t._v("DecimalDigit")]),t._v(" "),a("li",[t._v("x")]),t._v(" "),a("li",[t._v("u")])])]),t._v(" "),a("li",[t._v("HexEscapeSequence ::\n"),a("ul",[a("li",[t._v("x HexDigit HexDigit")])])]),t._v(" "),a("li",[t._v("UnicodeEscapeSequence ::\n"),a("ul",[a("li",[t._v("u "),a("strong",[t._v("Hex4Digits")])]),t._v(" "),a("li",[t._v("u{ CodePoint }")])])]),t._v(" "),a("li",[t._v("Hex4Digits ::\n"),a("ul",[a("li",[t._v("HexDigit HexDigit HexDigit HexDigit")])])])]),t._v(" "),a("p",[a("strong",[t._v("String Single Character Escape Sequences - 字符串单字符转义序列")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Escape Point")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("code Unit Value")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Unicode Character Name")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Symbol")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x0008")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("BACKSPACE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("BS")])]),t._v(" "),a("tr",[a("td",[t._v("\\t")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x0009")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CHARACTER TABULATION")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("HT")])]),t._v(" "),a("tr",[a("td",[t._v("\\n")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x000A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LINE FEED (LF)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LF")])]),t._v(" "),a("tr",[a("td",[t._v("\\v")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x000B")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LINE TABULATION")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("VT")])]),t._v(" "),a("tr",[a("td",[t._v("\\f")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x000C")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FORM FEED (FF)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FF")])]),t._v(" "),a("tr",[a("td",[t._v("\\r")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x000D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CARRIAGE RETURN (CR)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CR")])]),t._v(" "),a("tr",[a("td",[t._v('"')]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x0022")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("QUOTATION MARK")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('"')])]),t._v(" "),a("tr",[a("td",[t._v("'")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x0027")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("APOSTROPHE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("'")])]),t._v(" "),a("tr",[a("td",[t._v("\\")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0x005C")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("REVERSE SOLIDUS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("\\")])])])]),t._v(" "),a("h3",{attrs:{id:"regular-expression-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regular-expression-literals"}},[t._v("#")]),t._v(" Regular Expression Literals")]),t._v(" "),a("blockquote",[a("p",[t._v("正则表达式文字是一个输入元素，每次对文字进行求值时都会将其转换为RegExp对象。程序中的两个正则表达式文字求和为正则表达式对象，即使这两个文字的内容相同，它们也永远不会以===的形式进行比较。还可以在运行时通过以下方式创建RegExp对象：新的RegExp或将RegExp构造函数作为函数调用。下面的生成描述了正则表达式文字的语法，并且被输入元素扫描程序用来查找正则表达式文字的结尾。随后，使用更严格的ECMAScript正则表达式语法，再次解析包含RegularExpressionBody和RegularExpressionFlags的源文本。一个实现可以中定义的ECMAScript正则表达式语法，但不能扩展下面定义的RegularExpressionBody和RegularExpressionFlags生成或这些生成使用的生成。")])]),t._v(" "),a("p",[t._v("String字面量的形式: Syntax Syntax from "),a("strong",[t._v("ECMAScript")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("RegularExpressionLiteral ::")]),t._v(" "),a("ul",[a("li",[t._v("/ "),a("strong",[t._v("RegularExpressionBody")]),t._v(" / "),a("strong",[t._v("RegularExpressionFlags")])])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionBody ::")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("RegularExpressionFirstChar")]),t._v(" "),a("strong",[t._v("RegularExpressionChars")])])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionFirstChar ::")]),t._v(" "),a("ul",[a("li",[t._v("RegularExpressionNonTerminator but not one of * or \\ or / or [")]),t._v(" "),a("li",[a("strong",[t._v("RegularExpressionBackslashSequence")])]),t._v(" "),a("li",[a("strong",[t._v("RegularExpressionClass")])])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionChars ::")]),t._v(" "),a("ul",[a("li",[t._v("RegularExpressionNonTerminator but not one of \\ or / or [")]),t._v(" "),a("li",[a("strong",[t._v("RegularExpressionBackslashSequence")])]),t._v(" "),a("li",[a("strong",[t._v("RegularExpressionClass")])])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionBackslashSequence")]),t._v(" "),a("ul",[a("li",[t._v("\\ "),a("strong",[t._v("RegularExpressionNonTerminator")])])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionNonTerminator")]),t._v(" "),a("ul",[a("li",[t._v("SourceCharacter but not LineTerminator")])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionClass ::")]),t._v(" "),a("ul",[a("li",[t._v("[ "),a("strong",[t._v("RegularExpressionClassChars")]),t._v(" ]")])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionClassChars ::")]),t._v(" "),a("ul",[a("li",[t._v("[empty]")]),t._v(" "),a("li",[a("strong",[t._v("RegularExpressionClassChars")]),t._v(" "),a("strong",[t._v("RegularExpressionClassChar")])])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionClassChar ::")]),t._v(" "),a("ul",[a("li",[t._v("RegularExpressionNonTerminator but not one of ] or \\")]),t._v(" "),a("li",[t._v("RegularExpressionBackslashSequence")])])]),t._v(" "),a("li",[a("p",[t._v("RegularExpressionFlags ::")]),t._v(" "),a("ul",[a("li",[t._v("[empty]")]),t._v(" "),a("li",[t._v("RegularExpressionFlags "),a("strong",[t._v("IdentifierPart")])])])])]),t._v(" "),a("h3",{attrs:{id:"template-literal-lexical-components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#template-literal-lexical-components"}},[t._v("#")]),t._v(" Template Literal Lexical Components")]),t._v(" "),a("p",[t._v("Template字面量的形式: Syntax from "),a("strong",[t._v("ECMAScript")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Template ::")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("NoSubstitutionTemplate")])]),t._v(" "),a("li",[a("strong",[t._v("TemplateHead")])])])]),t._v(" "),a("li",[a("p",[t._v("NoSubstitutionTemplate ::")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("**TemplateCharacters**")])])])]),t._v(" "),a("li",[a("p",[t._v("TemplateHead ::")]),t._v(" "),a("ul",[a("li",[t._v("` "),a("strong",[t._v("TemplateCharacters")]),t._v(" ${")])])]),t._v(" "),a("li",[a("p",[t._v("TemplateSubstitutionTail ::")]),t._v(" "),a("ul",[a("li",[t._v("TemplateMiddle")]),t._v(" "),a("li",[t._v("TemplateTail")])])]),t._v(" "),a("li",[a("p",[t._v("TemplateMiddle ::")]),t._v(" "),a("ul",[a("li",[t._v("} TemplateCharacters ${")]),t._v(" "),a("li",[t._v("TemplateTail ::\n"),a("ul",[a("li",[t._v("} TemplateCharacters `")])])])])]),t._v(" "),a("li",[a("p",[t._v("TemplateCharacters ::")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("TemplateCharacter")]),t._v(" "),a("strong",[t._v("TemplateCharacter")])])])]),t._v(" "),a("li",[a("p",[t._v("TemplateCharacter ::")]),t._v(" "),a("ul",[a("li",[t._v("$ [lookahead ≠ {]")]),t._v(" "),a("li",[t._v("\\ EscapeSequence")]),t._v(" "),a("li",[t._v("\\ "),a("strong",[t._v("NotEscapeSequence")])]),t._v(" "),a("li",[t._v("LineContinuation")]),t._v(" "),a("li",[t._v("LineTerminatorSequence")]),t._v(" "),a("li",[t._v("SourceCharacter but not one of ` or \\ or $ or LineTerminator")])])]),t._v(" "),a("li",[a("p",[t._v("NotEscapeSequence :: 没有转移序列")]),t._v(" "),a("ul",[a("li",[t._v("0 DecimalDigit")]),t._v(" "),a("li",[t._v("DecimalDigit but not 0")]),t._v(" "),a("li",[t._v("x [lookahead ∉ HexDigit]")]),t._v(" "),a("li",[t._v("x HexDigit [lookahead ∉ HexDigit]")]),t._v(" "),a("li",[t._v("u [lookahead ∉ HexDigit] [lookahead ≠ {]")]),t._v(" "),a("li",[t._v("u HexDigit [lookahead ∉ HexDigit]")]),t._v(" "),a("li",[t._v("u HexDigit HexDigit [lookahead ∉ HexDigit]")]),t._v(" "),a("li",[t._v("u HexDigit HexDigit HexDigit [lookahead ∉ HexDigit] u { [lookahead ∉ HexDigit]")]),t._v(" "),a("li",[t._v("u { NotCodePoint [lookahead ∉ HexDigit]")]),t._v(" "),a("li",[t._v("u { CodePoint [lookahead ∉ HexDigit] [lookahead ≠ }]")])])])]),t._v(" "),a("h2",{attrs:{id:"相关文章以及规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关文章以及规范"}},[t._v("#")]),t._v(" 相关文章以及规范")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.fileformat.info/info/unicode/",target:"_blank",rel:"noopener noreferrer"}},[t._v("FileFormat"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.unicode.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unicode"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc3629",target:"_blank",rel:"noopener noreferrer"}},[t._v("UTF-8 a transformation format of ISO 10646"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 ASCII，Unicode 和 UTF-8"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/12/unicode.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 Unicode与JavaScript详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/camsong/blog/issues/9",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 浮点数陷阱及解法"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/xwcoder/xwcoder.github.com/issues/19",target:"_blank",rel:"noopener noreferrer"}},[t._v("IEEE 754双精度浮点格式和JavaScript中的Number"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);